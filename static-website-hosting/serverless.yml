frameworkVersion: '>=1.5.0 <2.0.0'

service:
    name: ${self:custom.name}

custom:
    name: ${self:provider.stage}-static-website-hosting

    s3BucketName: ${self:provider.stage}-static-website-hf83 # prepending random string to make unique

provider:
    name: aws
    profile: ${opt:profileName}
    stage: ${opt:stageName}
    region: us-east-1 # Needs to be in us-east-1 for Lambda@Edge
    stackName: ${self:custom.name}

functions:
    LambdaAtEdgeOriginResponse:
        name: ${self:custom.name}-lambda-edge-origin-response
        handler: src/handler.originResponse
        memorySize: 128
        timeout: 5
        events:
            - cloudFront:
                eventType: origin-response
                origin: s3://${self:custom.s3BucketName}.s3.amazonaws.com

resources:
    Parameters:
        CertificationARN:
            Default: arn:aws:acm:us-east-1:************:certificate/********-****-****-****-************
            Type: String

        HostedZoneId:
            Default: "**************"
            Type: String

        CloudfrontAlias:
            Default: mywebsite.com
            Type: String

    Resources:
        S3Bucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.s3BucketName}
                WebsiteConfiguration:
                    IndexDocument: index.html
                    ErrorDocument: 404.html

        CloudFrontOriginAccessIdentity:
            Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
            Properties:
                CloudFrontOriginAccessIdentityConfig:
                    Comment: ${self:custom.name}-origin-access-identity

        S3BucketPolicy:
            Type: AWS::S3::BucketPolicy
            DependsOn:
                - S3Bucket
                - CloudFrontOriginAccessIdentity
            Properties: 
                Bucket: ${self:custom.s3BucketName}
                PolicyDocument: 
                    Statement: 
                        - 
                            Action: 
                                - s3:GetObject
                                - s3:ListBucket
                            Effect: Allow
                            Resource: 
                                - arn:aws:s3:::${self:custom.s3BucketName}/*
                                - arn:aws:s3:::${self:custom.s3BucketName}
                            Principal:
                                AWS:
                                    Fn::Join:
                                        - ""
                                        -
                                            - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                                            - Ref: CloudFrontOriginAccessIdentity
        
        CloudFrontDistribution:
            Type: AWS::CloudFront::Distribution
            DependsOn:
                - S3Bucket
                - CloudFrontOriginAccessIdentity
            Properties:
                DistributionConfig: 
                    Enabled: true
                    Aliases:
                        - Ref: CloudfrontAlias
                    Origins:
                        -
                            Id: ${self:custom.s3BucketName} # Must match TargetOriginId below
                            S3OriginConfig:
                                OriginAccessIdentity:
                                    Fn::Join:
                                        - ""
                                        -
                                            - "origin-access-identity/cloudfront/"
                                            - Ref: CloudFrontOriginAccessIdentity
                    CustomErrorResponses:
                        -
                            ErrorCode: 404
                            ResponseCode: 404
                            ResponsePagePath: /404.html
                    DefaultRootObject: index.html
                    DefaultCacheBehavior:
                        ForwardedValues:
                            QueryString: true
                        TargetOriginId: ${self:custom.s3BucketName} # Must match Origins[0].Id above
                        ViewerProtocolPolicy: redirect-to-https
                    ViewerCertificate:
                        AcmCertificateArn:
                            Ref: CertificationARN
                        MinimumProtocolVersion: TLSv1.2_2018
                        SslSupportMethod: sni-only

        Route53RecordSet:
            Type: AWS::Route53::RecordSet
            Properties:
                Name:
                    Ref: CloudfrontAlias
                Type: A
                AliasTarget:
                    DNSName:
                        Fn::GetAtt: [ CloudFrontDistribution, DomainName ]
                    HostedZoneId: Z2FDTNDATAQYW2 # Hardcoded based on https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
                HostedZoneId:
                    Ref: HostedZoneId
                
                